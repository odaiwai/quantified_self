const puppeteer = require('puppeteer'); // v13.0.0 or later

(async () => {
    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    const timeout = 5000;
    page.setDefaultTimeout(timeout);

    {
        const targetPage = page;
        await targetPage.setViewport({
            width: 1086,
            height: 971
        })
    }
    {
        const targetPage = page;
        const promises = [];
        promises.push(targetPage.waitForNavigation());
        await targetPage.goto('https://cronometer.com/#account');
        await Promise.all(promises);
    }
    {
        const targetPage = page;
        await scrollIntoViewIfNeeded([
            [
                'aria/EXPORT DATA'
            ],
            [
                '#cronometerApp > div:nth-child(11) > div > div.container-raised.my-4 > div:nth-child(2) > div.col > button'
            ],
            [
                'xpath///*[@id="cronometerApp"]/div[11]/div/div[6]/div[2]/div[2]/button'
            ]
        ], targetPage, timeout);
        const element = await waitForSelectors([
            [
                'aria/EXPORT DATA'
            ],
            [
                '#cronometerApp > div:nth-child(11) > div > div.container-raised.my-4 > div:nth-child(2) > div.col > button'
            ],
            [
                'xpath///*[@id="cronometerApp"]/div[11]/div/div[6]/div[2]/div[2]/button'
            ]
        ], targetPage, { timeout, visible: true });
        await element.click({
          offset: {
            x: 91.671875,
            y: 31,
          },
        });
    }
    {
        const targetPage = page;
        await scrollIntoViewIfNeeded([
            [
                'aria/Last 7 days[role="button"]'
            ],
            [
                '#gwt-uid-965'
            ],
            [
                'xpath///*[@id="gwt-uid-965"]'
            ]
        ], targetPage, timeout);
        const element = await waitForSelectors([
            [
                'aria/Last 7 days[role="button"]'
            ],
            [
                '#gwt-uid-965'
            ],
            [
                'xpath///*[@id="gwt-uid-965"]'
            ]
        ], targetPage, { timeout, visible: true });
        await element.click({
          offset: {
            x: 176,
            y: 13,
          },
        });
    }
    {
        const targetPage = page;
        await scrollIntoViewIfNeeded([
            [
                'aria/All Time'
            ],
            [
                'body > div.pretty-dialog > div > div > table.mt-4 > tbody > tr:nth-child(1) > td > div > div > div:nth-child(2) > div > div > a:nth-child(10)'
            ],
            [
                'xpath//html/body/div[5]/div/div/table[2]/tbody/tr[1]/td/div/div/div[2]/div/div/a[10]'
            ]
        ], targetPage, timeout);
        const element = await waitForSelectors([
            [
                'aria/All Time'
            ],
            [
                'body > div.pretty-dialog > div > div > table.mt-4 > tbody > tr:nth-child(1) > td > div > div > div:nth-child(2) > div > div > a:nth-child(10)'
            ],
            [
                'xpath//html/body/div[5]/div/div/table[2]/tbody/tr[1]/td/div/div/div[2]/div/div/a[10]'
            ]
        ], targetPage, { timeout, visible: true });
        await element.click({
          offset: {
            x: 100,
            y: 17,
          },
        });
    }
    {
        const targetPage = page;
        const promises = [];
        promises.push(targetPage.waitForNavigation());
        await scrollIntoViewIfNeeded([
            [
                'aria/EXPORT DAILY NUTRITION[role="button"]'
            ],
            [
                'body > div.pretty-dialog > div > div > table.mt-4 > tbody > tr:nth-child(3) > td > button'
            ],
            [
                'xpath//html/body/div[5]/div/div/table[2]/tbody/tr[3]/td/button'
            ],
            [
                'text/Export Daily'
            ]
        ], targetPage, timeout);
        const element = await waitForSelectors([
            [
                'aria/EXPORT DAILY NUTRITION[role="button"]'
            ],
            [
                'body > div.pretty-dialog > div > div > table.mt-4 > tbody > tr:nth-child(3) > td > button'
            ],
            [
                'xpath//html/body/div[5]/div/div/table[2]/tbody/tr[3]/td/button'
            ],
            [
                'text/Export Daily'
            ]
        ], targetPage, { timeout, visible: true });
        await element.click({
          offset: {
            x: 146,
            y: 15,
          },
        });
        await Promise.all(promises);
    }
    {
        const targetPage = page;
        await scrollIntoViewIfNeeded([
            [
                'aria/EXPORT DATA'
            ],
            [
                '#cronometerApp > div:nth-child(11) > div > div.container-raised.my-4 > div:nth-child(2) > div.col > button'
            ],
            [
                'xpath///*[@id="cronometerApp"]/div[11]/div/div[6]/div[2]/div[2]/button'
            ]
        ], targetPage, timeout);
        const element = await waitForSelectors([
            [
                'aria/EXPORT DATA'
            ],
            [
                '#cronometerApp > div:nth-child(11) > div > div.container-raised.my-4 > div:nth-child(2) > div.col > button'
            ],
            [
                'xpath///*[@id="cronometerApp"]/div[11]/div/div[6]/div[2]/div[2]/button'
            ]
        ], targetPage, { timeout, visible: true });
        await element.click({
          offset: {
            x: 76.671875,
            y: 28,
          },
        });
    }
    {
        const targetPage = page;
        await scrollIntoViewIfNeeded([
            [
                'aria/Last 7 days[role="button"]'
            ],
            [
                '#gwt-uid-966'
            ],
            [
                'xpath///*[@id="gwt-uid-966"]'
            ]
        ], targetPage, timeout);
        const element = await waitForSelectors([
            [
                'aria/Last 7 days[role="button"]'
            ],
            [
                '#gwt-uid-966'
            ],
            [
                'xpath///*[@id="gwt-uid-966"]'
            ]
        ], targetPage, { timeout, visible: true });
        await element.click({
          offset: {
            x: 124,
            y: 25,
          },
        });
    }
    {
        const targetPage = page;
        await scrollIntoViewIfNeeded([
            [
                'aria/All Time'
            ],
            [
                'body > div.pretty-dialog > div > div > table.mt-4 > tbody > tr:nth-child(1) > td > div > div > div:nth-child(2) > div > div > a:nth-child(10)'
            ],
            [
                'xpath//html/body/div[5]/div/div/table[2]/tbody/tr[1]/td/div/div/div[2]/div/div/a[10]'
            ]
        ], targetPage, timeout);
        const element = await waitForSelectors([
            [
                'aria/All Time'
            ],
            [
                'body > div.pretty-dialog > div > div > table.mt-4 > tbody > tr:nth-child(1) > td > div > div > div:nth-child(2) > div > div > a:nth-child(10)'
            ],
            [
                'xpath//html/body/div[5]/div/div/table[2]/tbody/tr[1]/td/div/div/div[2]/div/div/a[10]'
            ]
        ], targetPage, { timeout, visible: true });
        await element.click({
          offset: {
            x: 84,
            y: 15,
          },
        });
    }
    {
        const targetPage = page;
        const promises = [];
        promises.push(targetPage.waitForNavigation());
        await scrollIntoViewIfNeeded([
            [
                'aria/EXPORT SERVINGS[role="button"]'
            ],
            [
                'body > div.pretty-dialog > div > div > table.mt-4 > tbody > tr:nth-child(4) > td > button'
            ],
            [
                'xpath//html/body/div[5]/div/div/table[2]/tbody/tr[4]/td/button'
            ],
            [
                'text/Export Servings'
            ]
        ], targetPage, timeout);
        const element = await waitForSelectors([
            [
                'aria/EXPORT SERVINGS[role="button"]'
            ],
            [
                'body > div.pretty-dialog > div > div > table.mt-4 > tbody > tr:nth-child(4) > td > button'
            ],
            [
                'xpath//html/body/div[5]/div/div/table[2]/tbody/tr[4]/td/button'
            ],
            [
                'text/Export Servings'
            ]
        ], targetPage, { timeout, visible: true });
        await element.click({
          offset: {
            x: 177,
            y: 13,
          },
        });
        await Promise.all(promises);
    }
    {
        const targetPage = page;
        await scrollIntoViewIfNeeded([
            [
                'aria/EXPORT DATA'
            ],
            [
                '#cronometerApp > div:nth-child(11) > div > div.container-raised.my-4 > div:nth-child(2) > div.col > button'
            ],
            [
                'xpath///*[@id="cronometerApp"]/div[11]/div/div[6]/div[2]/div[2]/button'
            ]
        ], targetPage, timeout);
        const element = await waitForSelectors([
            [
                'aria/EXPORT DATA'
            ],
            [
                '#cronometerApp > div:nth-child(11) > div > div.container-raised.my-4 > div:nth-child(2) > div.col > button'
            ],
            [
                'xpath///*[@id="cronometerApp"]/div[11]/div/div[6]/div[2]/div[2]/button'
            ]
        ], targetPage, { timeout, visible: true });
        await element.click({
          offset: {
            x: 98.671875,
            y: 14,
          },
        });
    }
    {
        const targetPage = page;
        await scrollIntoViewIfNeeded([
            [
                'aria/Last 7 days[role="button"]'
            ],
            [
                '#gwt-uid-967'
            ],
            [
                'xpath///*[@id="gwt-uid-967"]'
            ]
        ], targetPage, timeout);
        const element = await waitForSelectors([
            [
                'aria/Last 7 days[role="button"]'
            ],
            [
                '#gwt-uid-967'
            ],
            [
                'xpath///*[@id="gwt-uid-967"]'
            ]
        ], targetPage, { timeout, visible: true });
        await element.click({
          offset: {
            x: 164,
            y: 14,
          },
        });
    }
    {
        const targetPage = page;
        await scrollIntoViewIfNeeded([
            [
                'aria/All Time'
            ],
            [
                'body > div.pretty-dialog > div > div > table.mt-4 > tbody > tr:nth-child(1) > td > div > div > div:nth-child(2) > div > div > a:nth-child(10)'
            ],
            [
                'xpath//html/body/div[5]/div/div/table[2]/tbody/tr[1]/td/div/div/div[2]/div/div/a[10]'
            ]
        ], targetPage, timeout);
        const element = await waitForSelectors([
            [
                'aria/All Time'
            ],
            [
                'body > div.pretty-dialog > div > div > table.mt-4 > tbody > tr:nth-child(1) > td > div > div > div:nth-child(2) > div > div > a:nth-child(10)'
            ],
            [
                'xpath//html/body/div[5]/div/div/table[2]/tbody/tr[1]/td/div/div/div[2]/div/div/a[10]'
            ]
        ], targetPage, { timeout, visible: true });
        await element.click({
          offset: {
            x: 80,
            y: 3,
          },
        });
    }
    {
        const targetPage = page;
        const promises = [];
        promises.push(targetPage.waitForNavigation());
        await scrollIntoViewIfNeeded([
            [
                'aria/EXPORT EXERCISES[role="button"]'
            ],
            [
                'body > div.pretty-dialog > div > div > table.mt-4 > tbody > tr:nth-child(5) > td > button'
            ],
            [
                'xpath//html/body/div[5]/div/div/table[2]/tbody/tr[5]/td/button'
            ],
            [
                'text/Export Exercises'
            ]
        ], targetPage, timeout);
        const element = await waitForSelectors([
            [
                'aria/EXPORT EXERCISES[role="button"]'
            ],
            [
                'body > div.pretty-dialog > div > div > table.mt-4 > tbody > tr:nth-child(5) > td > button'
            ],
            [
                'xpath//html/body/div[5]/div/div/table[2]/tbody/tr[5]/td/button'
            ],
            [
                'text/Export Exercises'
            ]
        ], targetPage, { timeout, visible: true });
        await element.click({
          offset: {
            x: 164,
            y: 10,
          },
        });
        await Promise.all(promises);
    }
    {
        const targetPage = page;
        await scrollIntoViewIfNeeded([
            [
                'aria/EXPORT DATA'
            ],
            [
                '#cronometerApp > div:nth-child(11) > div > div.container-raised.my-4 > div:nth-child(2) > div.col > button'
            ],
            [
                'xpath///*[@id="cronometerApp"]/div[11]/div/div[6]/div[2]/div[2]/button'
            ]
        ], targetPage, timeout);
        const element = await waitForSelectors([
            [
                'aria/EXPORT DATA'
            ],
            [
                '#cronometerApp > div:nth-child(11) > div > div.container-raised.my-4 > div:nth-child(2) > div.col > button'
            ],
            [
                'xpath///*[@id="cronometerApp"]/div[11]/div/div[6]/div[2]/div[2]/button'
            ]
        ], targetPage, { timeout, visible: true });
        await element.click({
          offset: {
            x: 81.671875,
            y: 35,
          },
        });
    }
    {
        const targetPage = page;
        await scrollIntoViewIfNeeded([
            [
                'aria/Last 7 days[role="button"]'
            ],
            [
                '#gwt-uid-968'
            ],
            [
                'xpath///*[@id="gwt-uid-968"]'
            ]
        ], targetPage, timeout);
        const element = await waitForSelectors([
            [
                'aria/Last 7 days[role="button"]'
            ],
            [
                '#gwt-uid-968'
            ],
            [
                'xpath///*[@id="gwt-uid-968"]'
            ]
        ], targetPage, { timeout, visible: true });
        await element.click({
          offset: {
            x: 229,
            y: 39,
          },
        });
    }
    {
        const targetPage = page;
        await scrollIntoViewIfNeeded([
            [
                'aria/All Time'
            ],
            [
                'body > div.pretty-dialog > div > div > table.mt-4 > tbody > tr:nth-child(1) > td > div > div > div:nth-child(2) > div > div > a:nth-child(10)'
            ],
            [
                'xpath//html/body/div[5]/div/div/table[2]/tbody/tr[1]/td/div/div/div[2]/div/div/a[10]'
            ]
        ], targetPage, timeout);
        const element = await waitForSelectors([
            [
                'aria/All Time'
            ],
            [
                'body > div.pretty-dialog > div > div > table.mt-4 > tbody > tr:nth-child(1) > td > div > div > div:nth-child(2) > div > div > a:nth-child(10)'
            ],
            [
                'xpath//html/body/div[5]/div/div/table[2]/tbody/tr[1]/td/div/div/div[2]/div/div/a[10]'
            ]
        ], targetPage, { timeout, visible: true });
        await element.click({
          offset: {
            x: 65,
            y: 18,
          },
        });
    }
    {
        const targetPage = page;
        const promises = [];
        promises.push(targetPage.waitForNavigation());
        await scrollIntoViewIfNeeded([
            [
                'aria/EXPORT BIOMETRICS[role="button"]'
            ],
            [
                'body > div.pretty-dialog > div > div > table.mt-4 > tbody > tr:nth-child(6) > td > button'
            ],
            [
                'xpath//html/body/div[5]/div/div/table[2]/tbody/tr[6]/td/button'
            ],
            [
                'text/Export Biometrics'
            ]
        ], targetPage, timeout);
        const element = await waitForSelectors([
            [
                'aria/EXPORT BIOMETRICS[role="button"]'
            ],
            [
                'body > div.pretty-dialog > div > div > table.mt-4 > tbody > tr:nth-child(6) > td > button'
            ],
            [
                'xpath//html/body/div[5]/div/div/table[2]/tbody/tr[6]/td/button'
            ],
            [
                'text/Export Biometrics'
            ]
        ], targetPage, { timeout, visible: true });
        await element.click({
          offset: {
            x: 151,
            y: 8,
          },
        });
        await Promise.all(promises);
    }
    {
        const targetPage = page;
        await scrollIntoViewIfNeeded([
            [
                'aria/EXPORT DATA'
            ],
            [
                '#cronometerApp > div:nth-child(11) > div > div.container-raised.my-4 > div:nth-child(2) > div.col > button'
            ],
            [
                'xpath///*[@id="cronometerApp"]/div[11]/div/div[6]/div[2]/div[2]/button'
            ]
        ], targetPage, timeout);
        const element = await waitForSelectors([
            [
                'aria/EXPORT DATA'
            ],
            [
                '#cronometerApp > div:nth-child(11) > div > div.container-raised.my-4 > div:nth-child(2) > div.col > button'
            ],
            [
                'xpath///*[@id="cronometerApp"]/div[11]/div/div[6]/div[2]/div[2]/button'
            ]
        ], targetPage, { timeout, visible: true });
        await element.click({
          offset: {
            x: 87.671875,
            y: 12,
          },
        });
    }
    {
        const targetPage = page;
        await scrollIntoViewIfNeeded([
            [
                'aria/Last 7 days[role="button"]'
            ],
            [
                '#gwt-uid-969'
            ],
            [
                'xpath///*[@id="gwt-uid-969"]'
            ]
        ], targetPage, timeout);
        const element = await waitForSelectors([
            [
                'aria/Last 7 days[role="button"]'
            ],
            [
                '#gwt-uid-969'
            ],
            [
                'xpath///*[@id="gwt-uid-969"]'
            ]
        ], targetPage, { timeout, visible: true });
        await element.click({
          offset: {
            x: 187,
            y: 23,
          },
        });
    }
    {
        const targetPage = page;
        await scrollIntoViewIfNeeded([
            [
                'aria/All Time'
            ],
            [
                'body > div.pretty-dialog > div > div > table.mt-4 > tbody > tr:nth-child(1) > td > div > div > div:nth-child(2) > div > div > a:nth-child(10)'
            ],
            [
                'xpath//html/body/div[5]/div/div/table[2]/tbody/tr[1]/td/div/div/div[2]/div/div/a[10]'
            ]
        ], targetPage, timeout);
        const element = await waitForSelectors([
            [
                'aria/All Time'
            ],
            [
                'body > div.pretty-dialog > div > div > table.mt-4 > tbody > tr:nth-child(1) > td > div > div > div:nth-child(2) > div > div > a:nth-child(10)'
            ],
            [
                'xpath//html/body/div[5]/div/div/table[2]/tbody/tr[1]/td/div/div/div[2]/div/div/a[10]'
            ]
        ], targetPage, { timeout, visible: true });
        await element.click({
          offset: {
            x: 75,
            y: 19,
          },
        });
    }
    {
        const targetPage = page;
        const promises = [];
        promises.push(targetPage.waitForNavigation());
        await scrollIntoViewIfNeeded([
            [
                'aria/EXPORT NOTES[role="button"]'
            ],
            [
                'body > div.pretty-dialog > div > div > table.mt-4 > tbody > tr:nth-child(7) > td > button'
            ],
            [
                'xpath//html/body/div[5]/div/div/table[2]/tbody/tr[7]/td/button'
            ],
            [
                'text/Export Notes'
            ]
        ], targetPage, timeout);
        const element = await waitForSelectors([
            [
                'aria/EXPORT NOTES[role="button"]'
            ],
            [
                'body > div.pretty-dialog > div > div > table.mt-4 > tbody > tr:nth-child(7) > td > button'
            ],
            [
                'xpath//html/body/div[5]/div/div/table[2]/tbody/tr[7]/td/button'
            ],
            [
                'text/Export Notes'
            ]
        ], targetPage, { timeout, visible: true });
        await element.click({
          offset: {
            x: 145,
            y: 22,
          },
        });
        await Promise.all(promises);
    }

    await browser.close();

    async function waitForSelectors(selectors, frame, options) {
      for (const selector of selectors) {
        try {
          return await waitForSelector(selector, frame, options);
        } catch (err) {
          console.error(err);
        }
      }
      throw new Error('Could not find element for selectors: ' + JSON.stringify(selectors));
    }

    async function scrollIntoViewIfNeeded(selectors, frame, timeout) {
      const element = await waitForSelectors(selectors, frame, { visible: false, timeout });
      if (!element) {
        throw new Error(
          'The element could not be found.'
        );
      }
      await waitForConnected(element, timeout);
      const isInViewport = await element.isIntersectingViewport({threshold: 0});
      if (isInViewport) {
        return;
      }
      await element.evaluate(element => {
        element.scrollIntoView({
          block: 'center',
          inline: 'center',
          behavior: 'auto',
        });
      });
      await waitForInViewport(element, timeout);
    }

    async function waitForConnected(element, timeout) {
      await waitForFunction(async () => {
        return await element.getProperty('isConnected');
      }, timeout);
    }

    async function waitForInViewport(element, timeout) {
      await waitForFunction(async () => {
        return await element.isIntersectingViewport({threshold: 0});
      }, timeout);
    }

    async function waitForSelector(selector, frame, options) {
      if (!Array.isArray(selector)) {
        selector = [selector];
      }
      if (!selector.length) {
        throw new Error('Empty selector provided to waitForSelector');
      }
      let element = null;
      for (let i = 0; i < selector.length; i++) {
        const part = selector[i];
        if (element) {
          element = await element.waitForSelector(part, options);
        } else {
          element = await frame.waitForSelector(part, options);
        }
        if (!element) {
          throw new Error('Could not find element: ' + selector.join('>>'));
        }
        if (i < selector.length - 1) {
          element = (await element.evaluateHandle(el => el.shadowRoot ? el.shadowRoot : el)).asElement();
        }
      }
      if (!element) {
        throw new Error('Could not find element: ' + selector.join('|'));
      }
      return element;
    }

    async function waitForElement(step, frame, timeout) {
      const count = step.count || 1;
      const operator = step.operator || '>=';
      const comp = {
        '==': (a, b) => a === b,
        '>=': (a, b) => a >= b,
        '<=': (a, b) => a <= b,
      };
      const compFn = comp[operator];
      await waitForFunction(async () => {
        const elements = await querySelectorsAll(step.selectors, frame);
        return compFn(elements.length, count);
      }, timeout);
    }

    async function querySelectorsAll(selectors, frame) {
      for (const selector of selectors) {
        const result = await querySelectorAll(selector, frame);
        if (result.length) {
          return result;
        }
      }
      return [];
    }

    async function querySelectorAll(selector, frame) {
      if (!Array.isArray(selector)) {
        selector = [selector];
      }
      if (!selector.length) {
        throw new Error('Empty selector provided to querySelectorAll');
      }
      let elements = [];
      for (let i = 0; i < selector.length; i++) {
        const part = selector[i];
        if (i === 0) {
          elements = await frame.$$(part);
        } else {
          const tmpElements = elements;
          elements = [];
          for (const el of tmpElements) {
            elements.push(...(await el.$$(part)));
          }
        }
        if (elements.length === 0) {
          return [];
        }
        if (i < selector.length - 1) {
          const tmpElements = [];
          for (const el of elements) {
            const newEl = (await el.evaluateHandle(el => el.shadowRoot ? el.shadowRoot : el)).asElement();
            if (newEl) {
              tmpElements.push(newEl);
            }
          }
          elements = tmpElements;
        }
      }
      return elements;
    }

    async function waitForFunction(fn, timeout) {
      let isActive = true;
      const timeoutId = setTimeout(() => {
        isActive = false;
      }, timeout);
      while (isActive) {
        const result = await fn();
        if (result) {
          clearTimeout(timeoutId);
          return;
        }
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      throw new Error('Timed out');
    }

    async function changeSelectElement(element, value) {
      await element.select(value);
      await element.evaluateHandle((e) => {
        e.blur();
        e.focus();
      });
    }

    async function changeElementValue(element, value) {
      await element.focus();
      await element.evaluate((input, value) => {
        input.value = value;
        input.dispatchEvent(new Event('input', { bubbles: true }));
        input.dispatchEvent(new Event('change', { bubbles: true }));
      }, value);
    }

    async function typeIntoElement(element, value) {
      const textToType = await element.evaluate((input, newValue) => {
        if (
          newValue.length <= input.value.length ||
          !newValue.startsWith(input.value)
        ) {
          input.value = '';
          return newValue;
        }
        const originalValue = input.value;
        input.value = '';
        input.value = originalValue;
        return newValue.substring(originalValue.length);
      }, value);
      await element.type(textToType);
    }
})().catch(err => {
    console.error(err);
    process.exit(1);
});

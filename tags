!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/odaiwai/Documents/health/analyse_health_data/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
Date	temp.sql	/^CREATE TABLE Timestamp (Date Text, Timestamp Integer Primary Key);$/;"	E	table:Timestamp
ET	parse_apple_health_export.py	/^import xml.etree.ElementTree as ET$/;"	I	nameref:module:xml.etree.ElementTree
Fitbit	fitbit.rb	/^class Fitbit$/;"	c
Things to add to this project	TODO.md	/^# Things to add to this project$/;"	c
Timestamp	temp.sql	/^CREATE TABLE Timestamp (Date Text, Timestamp Integer Primary Key);$/;"	E	table:Timestamp
Timestamp	temp.sql	/^CREATE TABLE Timestamp (Date Text, Timestamp Integer Primary Key);$/;"	t
VERBOSE	getMyFitnessPalData.py	/^    VERBOSE = True$/;"	v
VERBOSE	get_cronometer_data.py	/^    VERBOSE = True$/;"	v
VERBOSE	parse_apple_health_export.py	/^    VERBOSE = 1$/;"	v
account_url	get_cronometer_data.py	/^    account_url = '{}\/#account\/'.format(site_url)$/;"	v
agent	getMyFitnessPalData.py	/^    agent = webdriver.Firefox(options=options)$/;"	v
agent	get_cronometer_data.py	/^    agent = webdriver.Firefox(options=options)$/;"	v
authd_client	upload-weight-data-to-fitbit.py	/^authd_client = fitbit.Fitbit($/;"	v
b	upload-weight-data-to-fitbit.py	/^        b = res.get(u'body')$/;"	v
build_fb_tables_from_file	parse_all_data.pl	/^sub build_fb_tables_from_file {$/;"	s
build_mfp_tables_from_files	parse_all_data.pl	/^sub build_mfp_tables_from_files {$/;"	s
build_tables_from_file	parse_apple_health_data.pl	/^sub build_tables_from_file {$/;"	s
build_tables_from_file	parse_apple_health_export.pl	/^sub build_tables_from_file {$/;"	s
build_tables_from_file	parse_fitbit_data.pl	/^sub build_tables_from_file {$/;"	s
build_tables_from_file	parse_fitbit_export.pl	/^sub build_tables_from_file {$/;"	s
build_tables_from_files	parse_myfitnesspaldata.pl	/^sub build_tables_from_files {$/;"	s
calculate_alpha	parseWeightData.pl	/^sub calculate_alpha {$/;"	s
clean_wide_char	xml_rules_apple_health.pl	/^sub clean_wide_char {$/;"	s
completeness	get_fitbit_data2.R	/^completeness = hr_data %>% group_by(dte = as.Date(time)) %>% summarise(comp = mean(hrate > 0))$/;"	g
con	process_health_data.R	/^con <- dbConnect(RSQLite::SQLite(), "~\/Documents\/health\/analyse_health_data\/health_data.sqli/;"	g
config	upload-weight-data-to-fitbit.py	/^config = ConfigParser.SafeConfigParser()$/;"	v
cookie	fitbitScraper.R	/^cookie <- login(email="odaiwai@gmail.com", password="ceG4Ayb1nAf5hEk")$/;"	g
cookie	fitbitScraper.R	/^cookie <- login(email="odaiwai@gmail.com", password="scylj7ok3div4del")  $/;"	g
cookie	get_fitbit_data.R	/^cookie = login("odaiwai@gmail.com", "ceG4Ayb1nAf5hEk", rememberMe = TRUE)$/;"	g
cookie	get_fitbit_data2.R	/^cookie = login("odaiwai@gmail.com", "ceG4Ayb1nAf5hEk", rememberMe = TRUE)$/;"	g
credentials	getMyFitnessPalData.py	/^    credentials =  get_credentials()$/;"	v
credentials	get_cronometer_data.py	/^    credentials =  get_credentials()$/;"	v
csvreader	upload-weight-data-to-fitbit.py	/^    csvreader = csv.reader(csvfile)$/;"	v
data	fitbit.rb	/^  def data(date = Time.now)$/;"	f	class:Fitbit
datadir	getMyFitnessPalData.py	/^    datadir = '..\/health_data\/myFitnessPal_data\/'$/;"	v
datadir	get_cronometer_data.py	/^    datadir = '..\/health_data\/cronometer_data\/'$/;"	v
datatype_from_healthkit	xml_rules_apple_health.pl	/^sub datatype_from_healthkit {$/;"	s
date	upload-weight-data-to-fitbit.py	/^        date = datetime.datetime.strptime(row[0], '%Y-%m-%d')$/;"	v
dates	getMyFitnessPalData.py	/^    dates = []$/;"	v
dates	get_cronometer_data.py	/^    dates = []$/;"	v
days.to.process	get_fitbit_data2.R	/^days.to.process = c(incomp.days, missing.days)$/;"	c
dbdo	parse_all_data.pl	/^sub dbdo {$/;"	s
dbdo	parse_apple_health_data.pl	/^sub dbdo {$/;"	s
dbdo	parse_apple_health_export.pl	/^sub dbdo {$/;"	s
dbdo	parse_fitbit_data.pl	/^sub dbdo {$/;"	s
dbdo	parse_fitbit_export.pl	/^sub dbdo {$/;"	s
dbdo	parse_myfitnesspaldata.pl	/^sub dbdo {$/;"	s
dbdo	xml_rules_apple_health.pl	/^sub dbdo {$/;"	s
define_xml_rules	xml_rules_apple_health.pl	/^sub define_xml_rules {$/;"	s
df	fitbitScraper.R	/^df <- get_daily_data(cookie, what="steps", start_date="2015-01-13", end_date="2015-01-20")  $/;"	g
df	fitbitScraper.R	/^df <- get_daily_data(cookie, what="steps", start_date="2015-01-13", end_date="2015-01-20")$/;"	g
df	fitbitScraper.R	/^df <- get_intraday_data(cookie, what="steps", date="2015-01-21")  $/;"	g
df	fitbitScraper.R	/^df <- get_intraday_data(cookie, what="steps", date="2015-01-21")$/;"	g
df	get_fitbit_data.R	/^  df = get_intraday_data(cookie, "heart-rate", date=sprintf("%s",s[i]))$/;"	g
df	get_fitbit_data2.R	/^  df = get_intraday_data(cookie, "heart-rate", date=sprintf("%s",s[i]))$/;"	g
display_as_hex	analyse_healthdb.pl	/^sub display_as_hex {$/;"	s
display_as_hex	parse_all_data.pl	/^sub display_as_hex {$/;"	s
display_as_hex	parse_myfitnesspaldata.pl	/^sub display_as_hex {$/;"	s
drop_all_tables	parse_all_data.pl	/^sub drop_all_tables {$/;"	s
drop_all_tables	parse_apple_health_data.pl	/^sub drop_all_tables {$/;"	s
drop_all_tables	parse_apple_health_export.pl	/^sub drop_all_tables {$/;"	s
drop_all_tables	parse_fitbit_data.pl	/^sub drop_all_tables {$/;"	s
drop_all_tables	parse_fitbit_export.pl	/^sub drop_all_tables {$/;"	s
drop_all_tables	parse_myfitnesspaldata.pl	/^sub drop_all_tables {$/;"	s
drop_all_tables	xml_rules_apple_health.pl	/^sub drop_all_tables {$/;"	s
enddate	get_fitbit_data.R	/^enddate = today()$/;"	g
enddate	get_fitbit_data2.R	/^enddate = today()$/;"	g
format_message	parse_apple_health_export.pl	/^sub format_message { # Helper sub to nicely format what we got from the XML$/;"	s
get_credentials	getMyFitnessPalData.py	/^def get_credentials():$/;"	f
get_credentials	get_cronometer_data.py	/^def get_credentials():$/;"	f
get_mfp_report_for_date	getMyFitnessPalData.pl	/^sub get_mfp_report_for_date{$/;"	s
get_printable_report	getMyFitnessPalData.pl	/^sub get_printable_report {# Go get the report URL$/;"	s
get_printable_report	getMyFitnessPalData.py	/^def get_printable_report(year, month):$/;"	f
get_printable_report	get_cronometer_data.py	/^def get_printable_report(year, month):$/;"	f
hdl_char	parse_apple_health_export.pl	/^sub hdl_char {$/;"	s
hdl_def	parse_apple_health_export.pl	/^sub hdl_def { }  # We just throw everything else$/;"	s
hdl_end	parse_apple_health_export.pl	/^sub hdl_end{$/;"	s
hdl_start	parse_apple_health_export.pl	/^sub hdl_start{$/;"	s
hr_data	get_fitbit_data.R	/^  hr_data = rbind(hr_data, df)$/;"	g
hr_data	get_fitbit_data.R	/^hr_data = list(time = c(), hrate = c())$/;"	L
hr_data	get_fitbit_data2.R	/^    hr_data = rbind(hr_data, df)$/;"	g
hrate	get_fitbit_data.R	/^hr_data = list(time = c(), hrate = c())$/;"	n	nameattr:hr_data.time	constructor:c
i	get_fitbit_data.R	/^for (i in 1:length(s)) {$/;"	g
i	get_fitbit_data2.R	/^for (i in days.to.process) {$/;"	g
incomp.days	get_fitbit_data2.R	/^incomp.days = which(completeness$comp < .9)$/;"	g
initialize	fitbit.rb	/^  def initialize(email, pass)$/;"	f	class:Fitbit
is_date	getMyFitnessPalData.py	/^        is_date = re.search(r'^([0-9]{4})\\-*([0-9]{2})', arg)$/;"	v
is_date	get_cronometer_data.py	/^        is_date = re.search(r'^([0-9]{4})\\-*([0-9]{2})', arg)$/;"	v
is_it_a_leap_year	getMyFitnessPalData.py	/^def is_it_a_leap_year(year):$/;"	f
is_it_a_leap_year	get_cronometer_data.py	/^def is_it_a_leap_year(year):$/;"	f
is_leap_year	getMyFitnessPalData.pl	/^sub is_leap_year {$/;"	s
last_day_of_month	getMyFitnessPalData.pl	/^sub last_day_of_month {$/;"	s
last_day_of_month	getMyFitnessPalData.py	/^def last_day_of_month(year, month):$/;"	f
last_day_of_month	get_cronometer_data.py	/^def last_day_of_month(year, month):$/;"	f
login	fitbit.rb	/^  def login$/;"	f	class:Fitbit
login_url	getMyFitnessPalData.py	/^    login_url = '{}\/account\/login'.format(site_url)$/;"	v
login_url	get_cronometer_data.py	/^    login_url = '{}\/login'.format(site_url)$/;"	v
main	getMyFitnessPalData.py	/^def main(dates):$/;"	f
main	get_cronometer_data.py	/^def main(dates):$/;"	f
main	parse_apple_health_export.py	/^def main():$/;"	f
main	parse_spreadsheet.py	/^def main():$/;"	f
make_db	parse_all_data.pl	/^sub make_db {$/;"	s
make_db	parse_apple_health_data.pl	/^sub make_db {$/;"	s
make_db	parse_apple_health_export.pl	/^sub make_db {$/;"	s
make_db	parse_fitbit_data.pl	/^sub make_db {$/;"	s
make_db	parse_fitbit_export.pl	/^sub make_db {$/;"	s
make_db	parse_myfitnesspaldata.pl	/^sub make_db {$/;"	s
make_db	xml_rules_apple_health.pl	/^sub make_db {$/;"	s
make_tables	parse_spreadsheet.py	/^def make_tables(dbc):$/;"	f
mfpData	fitnessData.R	/^mfpData <- read.csv("weightData.dat", sep="\\t", header = TRUE)$/;"	g
missing.days	get_fitbit_data2.R	/^missing.days = which(s %in% completeness$dte == FALSE)$/;"	g
new	parseWeightData.pl	/^sub new {$/;"	s
normalise_key	parse_all_data.pl	/^sub normalise_key {$/;"	s
normalise_key	parse_fitbit_data.pl	/^sub normalise_key {$/;"	s
normalise_value	parse_all_data.pl	/^sub normalise_value {$/;"	s
normalise_value	parse_fitbit_data.pl	/^sub normalise_value {$/;"	s
options	getMyFitnessPalData.py	/^    options = Options()$/;"	v
options	get_cronometer_data.py	/^    options = Options()$/;"	v
pct.complete.of.local.day	get_fitbit_data2.R	/^    pct.complete.of.local.day = mean(hr_data$hrate[yday(hr_data$time) == yday(s[i])] > 0)$/;"	g
pct.complete.of.server.day	get_fitbit_data2.R	/^    pct.complete.of.server.day = mean(df$hrate[yday(df$time) == yday(s[i])] > 0)$/;"	g
perl-toolbox.syntax.path	.vscode/settings.json	/^    "perl-toolbox.syntax.path": "\/usr\/local\/bin\/perl"$/;"	s
print_elapsed_time	run_weekly_tasks.sh	/^function print_elapsed_time {$/;"	f
print_elapsed_time	temp.sh	/^function print_elapsed_time {$/;"	f
printall	getMyFitnessPalData.pl	/^sub printall {$/;"	s
printall	get_fitbit_data.pl	/^sub printall {$/;"	s
process_weight_data	parseWeightData.pl	/^sub process_weight_data  {$/;"	s
querydb	parse_all_data.pl	/^sub querydb {$/;"	s
querydb	parse_apple_health_data.pl	/^sub querydb {$/;"	s
querydb	parse_apple_health_export.pl	/^sub querydb {$/;"	s
querydb	parse_fitbit_data.pl	/^sub querydb {$/;"	s
querydb	parse_fitbit_export.pl	/^sub querydb {$/;"	s
querydb	parse_myfitnesspaldata.pl	/^sub querydb {$/;"	s
querydb	xml_rules_apple_health.pl	/^sub querydb {$/;"	s
report_url	getMyFitnessPalData.py	/^    report_url = '{}\/reports\/printable_diary\/{}'.format(site_url,$/;"	v
rows	get_fitbit_data2.R	/^      rows = which(hr_data$time %in% df$time)$/;"	g
s	get_fitbit_data.R	/^s = seq(startdate, enddate, by="days")$/;"	g
s	get_fitbit_data2.R	/^s = seq(startdate, enddate, by="days")$/;"	g
sanitise	parse_all_data.pl	/^sub sanitise {$/;"	s
sanitise	parse_myfitnesspaldata.pl	/^sub sanitise {$/;"	s
sanitise	xml_rules_apple_health.pl	/^sub sanitise {$/;"	s
sanitise_line_for_input	parse_all_data.pl	/^sub sanitise_line_for_input {$/;"	s
sanitise_line_for_input	parse_apple_health_data.pl	/^sub sanitise_line_for_input {$/;"	s
sanitise_line_for_input	parse_apple_health_export.pl	/^sub sanitise_line_for_input {$/;"	s
sanitise_line_for_input	parse_fitbit_data.pl	/^sub sanitise_line_for_input {$/;"	s
sanitise_line_for_input	parse_fitbit_export.pl	/^sub sanitise_line_for_input {$/;"	s
site_url	getMyFitnessPalData.py	/^    site_url = 'https:\/\/www.myfitnesspal.com'$/;"	v
site_url	get_cronometer_data.py	/^    site_url = 'https:\/\/www.cronometer.com'$/;"	v
spreadsheet	parse_spreadsheet.py	/^    spreadsheet = "..\/daves_weight_v3.xlsx"$/;"	v
start_at_date	upload-weight-data-to-fitbit.py	/^            start_at_date = date$/;"	v
start_at_date	upload-weight-data-to-fitbit.py	/^start_at_date = datetime.datetime.strptime(start_at_str, '%Y-%m-%d')$/;"	v
start_at_str	upload-weight-data-to-fitbit.py	/^    start_at_str = sys.argv[2]$/;"	v
startdate	get_fitbit_data.R	/^startdate = as.Date('2013-10-05', format = "%Y-%m-%d")$/;"	g
startdate	get_fitbit_data2.R	/^startdate = as.Date('2015-08-07', format = "%Y-%m-%d")$/;"	g
tabledef_from_headerline	parse_all_data.pl	/^sub tabledef_from_headerline {$/;"	s
tabledef_from_headerline	parse_apple_health_data.pl	/^sub tabledef_from_headerline {$/;"	s
tabledef_from_headerline	parse_apple_health_export.pl	/^sub tabledef_from_headerline {$/;"	s
tabledef_from_headerline	parse_fitbit_data.pl	/^sub tabledef_from_headerline {$/;"	s
tabledef_from_headerline	parse_fitbit_export.pl	/^sub tabledef_from_headerline {$/;"	s
time	get_fitbit_data.R	/^hr_data = list(time = c(), hrate = c())$/;"	n	list:hr_data	constructor:c
timestamp	getMyFitnessPalData.pl	/^sub timestamp {$/;"	s
timestamp_from_date	parse_apple_health_data.pl	/^sub timestamp_from_date {$/;"	s
timestamp_from_date	parse_apple_health_export.pl	/^sub timestamp_from_date {$/;"	s
timestamp_from_date	parse_fitbit_data.pl	/^sub timestamp_from_date {$/;"	s
timestamp_from_date	parse_fitbit_export.pl	/^sub timestamp_from_date {$/;"	s
trim	analyse_healthdb.pl	/^sub trim {$/;"	s
trim	parse_all_data.pl	/^sub trim {$/;"	s
trim	parse_myfitnesspaldata.pl	/^sub trim {$/;"	s
type_from_data	parse_all_data.pl	/^sub type_from_data {$/;"	s
type_from_data	parse_apple_health_data.pl	/^sub type_from_data {$/;"	s
type_from_data	parse_apple_health_export.pl	/^sub type_from_data {$/;"	s
type_from_data	parse_fitbit_data.pl	/^sub type_from_data {$/;"	s
type_from_data	parse_fitbit_export.pl	/^sub type_from_data {$/;"	s
upload_weight	upload-weight-data-to-fitbit.py	/^def upload_weight(date, weight):$/;"	f
verbose	parse_spreadsheet.py	/^    verbose = 0$/;"	v
w	upload-weight-data-to-fitbit.py	/^        w = b.get(u'weight')$/;"	v
weight	upload-weight-data-to-fitbit.py	/^        weight = row[1].replace('.0', '')$/;"	v
weightData	parseWeightData.pl	/^package weightData;$/;"	p
weightData	process_health_data.R	/^weightData <- dbGetQuery(con, "select * from ss_physical where timestamp > \\'20™%\\'")$/;"	g
weightPlot	process_health_data.R	/^weightPlot <- ggplot(data = weightData) +$/;"	g
